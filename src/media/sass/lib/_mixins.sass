=b
	display: block
	content: " "
	position: absolute

=hide-input
	display: block
	position: absolute
	top: 0
	left: 0
	width: 100%
	height: 100%
	cursor: pointer
	opacity: 0
	-webkit-appearance: button

=hide-input-file
	+hide-input
	font-size: 100px
	left: auto
	right: 0
	width: auto
	height: auto

// Grid
=cols($cols, $max-cols)
	width: (100%/$max-cols*$cols)

=offset($offset-cols, $max-cols)
	@if $offset-cols == 0
		margin-left: 0
	@else
		margin-left: (100%/$max-cols*$offset-cols)

=text-overflow
	overflow: hidden
	text-overflow: ellipsis
	white-space: nowrap

=letterSpacing($interval)
	letter-spacing: unquote(($interval / 1000) + 'em')

=cover
	background-repeat: no-repeat
	background-size: cover
	background-position: 50% 50%

=retina
	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)
		@content

=retina3x
	@media only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3)
		@content

=box
	box-sizing: border-box

=ti
	overflow: hidden
	text-indent: -999em

=placeholder
	&:-ms-input-placeholder
		@content
	&:-moz-placeholder
		@content
	&::-moz-placeholder
		@content
	&::-webkit-input-placeholder
		@content
	&::placeholder
		@content

=unselectable
	user-select: none

=prevent-text
	-ms-word-break: break-all
	word-break: break-all
	word-break: break-word
	-webkit-hyphens: auto
	-moz-hyphens: auto
	hyphens: auto

=gpu
	+transform(translate3d(0, 0, 0))

=smooth-triangle
	transform: rotate(0.05deg)

=scrollbar
	& ::-moz-scrollbar
		@content
	& ::-webkit-scrollbar
		@content
	& ::scrollbar
		@content

=scrollbar-track
	& ::-moz-scrollbar-track
		@content
	& ::-webkit-scrollbar-track
		@content
	& ::scrollbar-track
		@content

=scrollbar-thumb
	& ::-moz-scrollbar-thumb
		@content
	& ::-webkit-scrollbar-thumb
		@content
	& ::scrollbar-thumb
		@content

=scrollbar-track-piece
	& ::-moz-scrollbar-track-piece
		@content
	& ::-webkit-scrollbar-track-piece
		@content
	& ::scrollbar-track-piece
		@content

=arr($width, $height, $bg, $direction)
	width: 0px
	height: 0px
	border-style: solid
	@if $direction == t
		border-width: 0 $width / 2 + px $height + px $width / 2 + px
		border-color: transparent transparent $bg transparent
	@if $direction == r
		border-width: $height / 2 + px 0 $height / 2 + px $width + px
		border-color: transparent transparent transparent $bg
	@if $direction == b
		border-width: $height + px $width / 2 + px 0 $width / 2 + px
		border-color: $bg transparent transparent transparent
	@if $direction == l
		border-width: $height / 2 + px $width + px $height / 2 + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == tl
		border-width: $height + px $width + px 0 0
		border-color: $bg transparent transparent transparent
	@if $direction == tr
		border-width: 0 $width + px $height + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == br
		border-width: 0 0 $height + px $width + px
		border-color: transparent transparent $bg transparent
	@if $direction == bl
		border-width: $width + px 0 0 $height + px
		border-color: transparent transparent transparent $bg

// example
// +arr(500,50, #000, l)
// +arr(500,50, #000, bl)

=br($radius)
	border-radius: $radius

// Retina Backgrounds for Compass
// by:              Gaya Kessler
// last update:     03/11/14
// url: https://github.com/pixelmord/Retina-Sprites-for-Compass
//
// Usage:
// 1. create background image for pixel ratio 1 screens and put it somewhere in your images folder.
// 2. create background image for pixel ratio 2 screens and put it somewhere in your images folder.
// 3. include the background-image property in your Sass/Scss using: '@include background-retina(<ratio-1-imagefile>, <ratio-2-imagefile>)'

@mixin background-retina($normal, $retina, $contain: false)
	background-image: image-url($normal)
	@media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min--moz-device-pixel-ratio: 2), (min-device-pixel-ratio: 2), (min-resolution: 144dppx)
		background-image: image-url($retina)
		@if $contain == true
			background-size: contain
		@else
			background-size: (image-width($retina) / 2) (image-height($retina) / 2)

=vertical-align($parent_container)
	vertical-align: middle
	display: inline-block
	white-space: normal
	font-size: $default-font-size
	@at-root #{$parent_container}
		white-space: nowrap
		font-size: 0
		&:before
			content: ""
			display: inline-block
			vertical-align: middle
			height: 100%
			width: 0

=loading
	@at-root html._loading #{&}
		@content

=mac
	@at-root html._mac #{&}
		@content

=windows
	@at-root html._win #{&}
		@content

=desktop
	@at-root html._desktop #{&}
		@content

=mobile
	@at-root html._mobile #{&}
		@content

=tablet
	@at-root html._tablet #{&}
		@content

=phone
	@at-root html._phone #{&}
		@content

=screen-phone
	@include mq($max-width: $breakpoint-sm)
		@content

=screen-tablet
	@include mq($min-width: $breakpoint-sm)
		@content

=screen-tablet-only
	@include mq($min-width: $breakpoint-sm, $max-width: $breakpoint-md)
		@content

=screen-desktop
	@include mq($min-width: $breakpoint-md)
		@content

=screen-desktop-only
	@include mq($min-width: $breakpoint-md, $max-width: $breakpoint-lg)
		@content

=screen-desktop-lg
	@include mq($min-width: $breakpoint-lg)
		@content

=screen-desktop-lg-only
	@include mq($min-width: $breakpoint-lg, $max-width: $breakpoint-lg-mid)
		@content

=screen-desktop-lg-mid
	@include mq($min-width: $breakpoint-lg-mid)
		@content

=screen-desktop-lg-mid-only
	@include mq($min-width: $breakpoint-lg-mid, $max-width: $breakpoint-lg2)
		@content

=screen-desktop-lg2
	@include mq($min-width: $breakpoint-lg2)
		@content

=screen-below-desktop
	@include mq($max-width: $breakpoint-md)
		@content


// Aspect-ratio blocks.
// Stealed from here:
// https://github.com/timbilalov/aspect-ratio

// Original version
=aspect-ratio($w, $h, $position: false, $childSelector: false)
	@if $position
		position: $position
	$pt: percentage($h / $w)

	&:before
		display: block
		content: ""
		width: 100%
		padding-top: $pt

	@if $childSelector
		#{$childSelector}
			position: absolute
			left: 0
			top: 0
			width: 100%
			height: 100%

// Updated version
=aspect-ratio--upd($w, $h: $w, $childSelector: false)
	$pt: percentage($h / $w)
	padding-top: $pt

	@if $childSelector
		#{$childSelector}
			margin-top: (- $pt)

=centered($width, $height: $width)
	@if $width and $height
		width: $width
		height: $height
		position: absolute
		@if unit($width) == "%" and unit($height) == "%"
			left: (100% - $width) / 2
			top: (100% - $height) / 2
		@else
			left: 50%
			top: 50%
			margin-left: -$width / 2
			margin-top: -$height / 2

=font-responsive($cp1-fsize, $cp1-wsize, $cp2-fsize, $cp2-wsize, $only-min: true)
	$koef: strip-units($cp2-fsize - $cp1-fsize) / strip-units($cp2-wsize - $cp1-wsize)
	font-size: calc(#{$cp1-fsize} + (100vw - #{$cp1-wsize}) * #{$koef})

	@if $only-min
		@media screen and (max-width: $cp1-wsize)
			font-size: $cp1-fsize


=font-responsive--v2($cp1-fsize, $cp1-wsize, $cp2-fsize, $cp2-wsize, $cp3-fsize, $cp3-wsize, $only-min: true)
	@media screen and (max-width: $cp2-wsize)
		$koef1: strip-units($cp2-fsize - $cp1-fsize) / strip-units($cp2-wsize - $cp1-wsize)
		font-size: calc(#{$cp1-fsize} + (100vw - #{$cp1-wsize}) * #{$koef1})

	@media screen and (min-width: $cp2-wsize)
		$koef2: strip-units($cp3-fsize - $cp2-fsize) / strip-units($cp3-wsize - $cp2-wsize)
		font-size: calc(#{$cp2-fsize} + (100vw - #{$cp2-wsize}) * #{$koef2})

	@if $only-min
		@media screen and (max-width: $cp1-wsize)
			font-size: $cp1-fsize

=font-size($fz, $fz-parent: false)
	@if $fz-parent == false
		font-size: rel-size($fz)
	@else
		font-size: rel-size($fz, $fz-parent, 'em')